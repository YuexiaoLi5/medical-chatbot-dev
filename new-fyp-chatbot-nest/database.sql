create table public.chat_history (
  id uuid not null default gen_random_uuid (),
  user_id uuid null default gen_random_uuid (),
  role text null,
  context text not null,
  created_at timestamp with time zone not null default now(),
  constraint chat_history_pkey primary key (id),
  constraint chat_history_user_id_fkey foreign KEY (user_id) references profiles (id),
  constraint chat_history_role_check check (
    (
      role = any (
        array['user'::text, 'system'::text, 'assistant'::text]
      )
    )
  )
) TABLESPACE pg_default;

create table public.doctor_exercise_recommendations (
  doctor_input_id uuid not null default gen_random_uuid (),
  exercise_id uuid not null default gen_random_uuid (),
  constraint doctor_exercise_recommendations_pkey primary key (doctor_input_id, exercise_id),
  constraint doctor_exercise_recommendations_doctor_input_id_fkey foreign KEY (doctor_input_id) references patients (id) on update CASCADE on delete CASCADE,
  constraint doctor_exercise_recommendations_exercise_id_fkey foreign KEY (exercise_id) references exercises (id) on update CASCADE on delete CASCADE
) TABLESPACE pg_default;

create table public.exercise_allocations (
  id uuid not null default gen_random_uuid (),
  profile_id uuid null default gen_random_uuid (),
  exercise_name character varying not null,
  exercise_date date not null,
  start_time time without time zone not null,
  end_time time without time zone not null,
  duration integer not null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint exercise_allocations_pkey primary key (id),
  constraint exercise_allocations_profile_id_fkey foreign KEY (profile_id) references profiles (id) on update CASCADE on delete CASCADE
) TABLESPACE pg_default;

create table public.exercises (
  id uuid not null default gen_random_uuid (),
  name text not null,
  description text null,
  intensity text null,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone null default now(),
  constraint exercises_pkey primary key (id),
  constraint exercises_intensity_check check (
    (
      intensity = any (
        array['low'::text, 'moderate'::text, 'vigorous'::text]
      )
    )
  )
) TABLESPACE pg_default;

create table public.patients (
  id uuid not null default gen_random_uuid (),
  moderate_hr_min integer null,
  moderate_hr_max integer null,
  vigorous_hr_min integer null,
  vigorous_hr_max integer null,
  target_duration_week integer null,
  prompt_times text[] null,
  medical_condition text null,
  disability_level text null,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone null default now(),
  full_name text not null,
  age smallint not null,
  gender text not null,
  phone_number text not null,
  constraint doctor_inputs_pkey primary key (id),
  constraint patients_phone_number_key unique (phone_number),
  constraint doctor_inputs_moderate_hr_min_check check ((moderate_hr_min > 0)),
  constraint doctor_inputs_disability_level_check check (
    (
      disability_level = any (
        array['low'::text, 'moderate'::text, 'high'::text]
      )
    )
  ),
  constraint doctor_inputs_vigorous_hr_max_check check ((vigorous_hr_max > 0)),
  constraint doctor_inputs_vigorous_hr_min_check check ((vigorous_hr_min > 0)),
  constraint doctor_inputs_target_duration_week_check check ((target_duration_week > 0)),
  constraint doctor_inputs_moderate_hr_max_check check ((moderate_hr_max > 0))
) TABLESPACE pg_default;

create table public.profiles (
  id uuid not null default gen_random_uuid (),
  full_name text null,
  avatar_url text null,
  role text null default 'patient'::text,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint profiles_pkey primary key (id),
  constraint profiles_id_fkey foreign KEY (id) references auth.users (id) on update CASCADE on delete CASCADE,
  constraint profiles_role_check check (
    (
      role = any (array['doctor'::text, 'patient'::text])
    )
  )
) TABLESPACE pg_default;

create table public.strategies (
  id uuid not null default gen_random_uuid (),
  strategy_type text not null,
  strategy_name text not null,
  example text not null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint strategies_pkey primary key (id)
) TABLESPACE pg_default;

create table public.tracker (
  id bigint generated by default as identity not null,
  "startDate" text null,
  duration bigint null,
  steps bigint null,
  distance double precision null,
  calories double precision null,
  "moderateIntensity" bigint null,
  "vigorousIntesity" bigint null,
  heartrate jsonb null,
  user_id text null,
  "profileID" uuid null default gen_random_uuid (),
  created_at timestamp with time zone null default now(),
  constraint tracker_pkey primary key (id),
  constraint tracker_profileID_fkey foreign KEY ("profileID") references profiles (id) on update CASCADE on delete CASCADE
) TABLESPACE pg_default;

create table public.user_availability (
  id uuid not null default gen_random_uuid (),
  profile_id uuid null,
  day_of_week text not null,
  start_time time without time zone not null,
  end_time time without time zone not null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint user_availability_pkey primary key (id),
  constraint user_availability_profile_id_fkey foreign KEY (profile_id) references profiles (id) on update CASCADE on delete CASCADE
) TABLESPACE pg_default;

create table public.user_sessions (
  session_id uuid not null default gen_random_uuid (),
  user_id uuid null,
  y_c double precision null,
  y_p double precision null,
  strategy_weights jsonb null,
  selected_strategies jsonb null,
  strategy_index_chosen integer null,
  specific_strategy_index integer null,
  persuasion_attempt integer null,
  current_exercise text null,
  failed_persuasion_count integer null default 0,
  first_time boolean null default true,
  first_route_chosen text null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint user_sessions_pkey primary key (session_id),
  constraint user_sessions_user_id_fkey foreign KEY (user_id) references profiles (id) on update CASCADE on delete CASCADE,
  constraint user_sessions_first_route_chosen_check check (
    (
      first_route_chosen = any (array['central'::text, 'peripheral'::text])
    )
  )
) TABLESPACE pg_default;

CREATE OR REPLACE FUNCTION public.onAuthUserCreatedTrigger()
RETURNS trigger
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  INSERT INTO public.profiles (id, role, full_name)
  VALUES (NEW.id, 'patient', NEW.metadata->>'full_name');

  RETURN NEW;
END;
$$;

create trigger OnAuthUserCreated
  after insert on auth.users
  for each row execute procedure public.onAuthUserCreatedTrigger();